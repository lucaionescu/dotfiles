RED="\033[01;31m"
YELLOW="\033[01;33m"
GREEN="\033[01;32m"
OCHRE="\033[38;5;95m"
BLUE="\033[01;34m"
WHITE="\033[01;37m"
RESET="\033[0m"

function git_color {
    local git_status="$(git status 2> /dev/null)"

    if [[ ! $git_status =~ "working directory clean" ]]; then
       echo -e $RED
           elif [[ $git_status =~ "Your branch is ahead of" ]]; then
	   	echo -e $YELLOW
		    elif [[ $git_status =~ "nothing to commit" ]]; then
		    	 echo -e $GREEN
			     else
				echo -e $OCHRE
				    fi
				    }

function git_branch {
    local git_status="$(git status 2> /dev/null)"
        local on_branch="On branch ([^${IFS}]*)"
	    local on_commit="HEAD detached at ([^${IFS}]*)"

    if [[ $git_status =~ $on_branch ]]; then
       local branch=${BASH_REMATCH[1]}
       	     echo "($branch)"
	         elif [[ $git_status =~ $on_commit ]]; then
		      local commit=${BASH_REMATCH[1]}
		      	    echo "($commit)"
			        fi
				}

# PS1="\[$WHITE\]\w \[\$(git_color)\]\$(git_branch)\[$BLUE\]\[$RESET\] "

function parse_git_branch {
    git rev-parse --git-dir > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        git_status="$(git status 2> /dev/null)"
        git_stash="$(git stash list 2> /dev/null)"
        branch_pattern="^On branch ([^${IFS}]*)"
        detached_branch_pattern="# Not currently on any branch"
        remote_pattern="# Your branch is (.*) of"
        diverge_pattern="# Your branch and (.*) have diverged"
        untracked_pattern="# Untracked files:"
        new_pattern="new file:"
        not_staged_pattern="Changes not staged for commit"

        #files not staged for commit
        if [[ ${git_status}} =~ ${not_staged_pattern} ]]; then
            state="✔"
        fi
        #files stashes
        if [[ !${#git_stash} -eq 0 ]]; then
            state="${state}☉"
        fi
        # add an else if or two here if you want to get more specific
        # show if we're ahead or behind HEAD
        if [[ ${git_status} =~ ${remote_pattern} ]]; then
            if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
                remote="↑"
            else
                remote="↓"
            fi
        fi
        #new files
        if [[ ${git_status} =~ ${new_pattern} ]]; then
            remote="+"
        fi
        #untracked files
        if [[ ${git_status} =~ ${untracked_pattern} ]]; then
            remote="✖"
        fi
        #diverged branch
        if [[ ${git_status} =~ ${diverge_pattern} ]]; then
            remote="↕"
        fi
        #branch name
        if [[ ${git_status} =~ ${branch_pattern} ]]; then
            branch=${BASH_REMATCH[1]}
        #detached branch
        elif [[ ${git_status} =~ ${detached_branch_pattern} ]]; then
            branch="NO BRANCH"
        fi

        echo " (${branch} ${state}${remote})"
    fi
    return
}

PS1="\[$WHITE\]\w \[\$(git_color)\]\$(parse_git_branch)\[$BLUE\]\[$RESET\] "

export PS1
